//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputActions/XRInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRInput"",
    ""maps"": [
        {
            ""name"": ""XRActions"",
            ""id"": ""71a0dda5-378b-42fe-9560-ddb751b2dbb5"",
            ""actions"": [
                {
                    ""name"": ""Move UI"",
                    ""type"": ""Button"",
                    ""id"": ""2c78db4d-28e5-4a7e-b012-cc6c05bd14ae"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle UI"",
                    ""type"": ""Button"",
                    ""id"": ""18d17469-2df4-496b-8326-bcce653a6316"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""75b46f3a-24eb-4b1b-8f19-0fd293210930"",
                    ""path"": ""<OculusTouchController>/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move UI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d5905d8-8fdf-4b31-8c09-4711ae883b56"",
                    ""path"": ""<XRSimulatedController>/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move UI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97d2de29-1485-4f2e-8231-9292d5c57f27"",
                    ""path"": ""<OculusTouchController>/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle UI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3eef9140-b933-4467-adbd-017c013216bd"",
                    ""path"": ""<XRSimulatedController>/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle UI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XRActions
        m_XRActions = asset.FindActionMap("XRActions", throwIfNotFound: true);
        m_XRActions_MoveUI = m_XRActions.FindAction("Move UI", throwIfNotFound: true);
        m_XRActions_ToggleUI = m_XRActions.FindAction("Toggle UI", throwIfNotFound: true);
    }

    ~@XRInput()
    {
        UnityEngine.Debug.Assert(!m_XRActions.enabled, "This will cause a leak and performance issues, XRInput.XRActions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRActions
    private readonly InputActionMap m_XRActions;
    private List<IXRActionsActions> m_XRActionsActionsCallbackInterfaces = new List<IXRActionsActions>();
    private readonly InputAction m_XRActions_MoveUI;
    private readonly InputAction m_XRActions_ToggleUI;
    public struct XRActionsActions
    {
        private @XRInput m_Wrapper;
        public XRActionsActions(@XRInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUI => m_Wrapper.m_XRActions_MoveUI;
        public InputAction @ToggleUI => m_Wrapper.m_XRActions_ToggleUI;
        public InputActionMap Get() { return m_Wrapper.m_XRActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRActionsActions set) { return set.Get(); }
        public void AddCallbacks(IXRActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_XRActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRActionsActionsCallbackInterfaces.Add(instance);
            @MoveUI.started += instance.OnMoveUI;
            @MoveUI.performed += instance.OnMoveUI;
            @MoveUI.canceled += instance.OnMoveUI;
            @ToggleUI.started += instance.OnToggleUI;
            @ToggleUI.performed += instance.OnToggleUI;
            @ToggleUI.canceled += instance.OnToggleUI;
        }

        private void UnregisterCallbacks(IXRActionsActions instance)
        {
            @MoveUI.started -= instance.OnMoveUI;
            @MoveUI.performed -= instance.OnMoveUI;
            @MoveUI.canceled -= instance.OnMoveUI;
            @ToggleUI.started -= instance.OnToggleUI;
            @ToggleUI.performed -= instance.OnToggleUI;
            @ToggleUI.canceled -= instance.OnToggleUI;
        }

        public void RemoveCallbacks(IXRActionsActions instance)
        {
            if (m_Wrapper.m_XRActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXRActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_XRActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XRActionsActions @XRActions => new XRActionsActions(this);
    public interface IXRActionsActions
    {
        void OnMoveUI(InputAction.CallbackContext context);
        void OnToggleUI(InputAction.CallbackContext context);
    }
}
